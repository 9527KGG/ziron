// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library ddk.protocol.usb.bus;

using zx;
using ddk.driver;
using ddk.protocol.usb.hub;

const uint32 HUB_DESC_SIZE = 15;         /// sizeof(usb_hub_descriptor_t)

enum UsbSpeed : uint32 {};

[Layout="ddk-protocol", DefaultProtocol]
interface UsbBus {
    /// Configures a new hub based on its USB hub descriptor.
    1: ConfigureHub(ddk.driver.ZxDevice? hub_device, UsbSpeed speed,
                    array<uint8>:HUB_DESC_SIZE desc) -> (zx.status s);
    /// Informs the USB bus that a new device has been added.
    2: DeviceAdded(ddk.driver.ZxDevice? hub_device, uint32 port, UsbSpeed speed) -> (zx.status s);
    /// Informs the USB bus that a device has been removed.
    3: DeviceRemoved(ddk.driver.ZxDevice? hub_device, uint32 port) -> (zx.status s);
    /// Used by USB hub driver to register its USB hub protocol with the USB bus driver.
    4: SetHubProtocol(ddk.driver.ZxDevice? usb_device, ddk.protocol.usb.hub.UsbHub hub)
                    -> (zx.status s);
};

/// Interface for use by the HCI controller to use to notify when devices are added and removed.
[Layout="ddk-protocol"]
interface UsbBusInterface {
    1: AddDevice(uint32 device_id, uint32 hub_id, UsbSpeed speed) -> (zx.status s);
    2: RemoveDevice(uint32 device_id) -> (zx.status s);
    3: ResetPort(uint32 hub_id, uint32 port) -> (zx.status s);
};
