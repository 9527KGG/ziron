// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library ddk.protocol.usb;

using ddk.protocol.usb.request;
using zircon.hw.usb;
using zx;

[Layout="ddk-callback"]
interface UsbBatchRequestComplete {
    Callback(vector<ddk.protocol.usb.request.UsbRequest> reqs) -> ();
};

[Layout = "ddk-protocol", DefaultProtocol]
interface Usb {
    // Initiates a control transfer with the device.
    Control(zircon.hw.usb.UsbSetup setup, vector<voidptr> write) -> (zx.status status,
                                                                     vector<voidptr> read);
    /// Queues a USB request
    RequestQueue(ddk.protocol.usb.request.UsbRequest? usb_request,
                 ddk.protocol.usb.request.UsbRequestComplete? complete_cb) -> ();

    ConfigureBatchCallback(uint8 ep_address, UsbBatchRequestComplete complete_cb)
                           -> (zx.status status);

    GetSpeed() -> (zircon.hw.usb.UsbSpeed s);

    SetInterface(uint8 interface_number, uint8 alt_setting) -> (zx.status s);

    GetConfiguration() -> (uint8 configuration);

    SetConfiguration(uint8 configuration) -> (zx.status s);

    EnableEndpoint(zircon.hw.usb.UsbEndpointDescriptor ep_desc,
                   zircon.hw.usb.UsbSsEpCompDescriptor ss_com_desc,
                   bool enable) -> (zx.status s);

    /// Resets an endpoint that is in a halted or error state.
    /// Endpoints will be halted if the device returns a STALL in response to a USB transaction.
    /// When that occurs, the transaction will fail with ERR_IO_REFUSED.
    /// usb_reset_endpoint() the endpoint to normal running state.
    ResetEndpoint(uint8 ep_address) -> (zx.status s);

    /// returns the maximum amount of data that can be transferred on an endpoint in a single
    /// transaction.
    GetMaxTransferSize(uint8 ep_address) -> (usize s);

    GetDeviceId() -> (uint32 dev_id);

    GetDeviceDescriptor() -> (zircon.hw.usb.UsbDeviceDescriptor desc);

    GetConfigurationDescriptor(uint8 configuration)
           -> (vector<zircon.hw.usb.UsbConfigurationDescriptor>? desc);

    /// returns the USB descriptors for the USB device or interface
    /// the returned value is de-allocated with free()

    GetDescriptorList() -> (vector<voidptr> descriptors);

    /// Fetch the descriptor using the provided descriptor ID and language ID.  If
    /// the language ID requested is not available, the first entry of the language
    /// ID table will be used instead and be provided in the updated version of the
    /// parameter.
    ///
    /// The string will be encoded using UTF-8, and will be truncated to fit the
    /// space provided by the buflen parameter.  buflen will be updated to indicate
    /// the amount of space needed to hold the actual UTF-8 encoded string lenth, and
    /// may be larger than the original value passed.  Embedded nulls may be present
    /// in the string, and the result may not be null terminated if the string
    /// occupies the entire provided buffer.
    GetStringDescriptor(uint8 desc_id, uint16 lang_id) -> (zx.status s, uint16 lang_id,
                                                           vector<voidptr> buf);
    CancelAll(uint8 ep_address) -> (zx.status s);

    GetCurrentFrame() -> (uint64 frame);

    /// Returns the size needed for a |usb_request_t|, including private storage needed by
    /// all layers of the USB stack.
    GetRequestSize() -> (usize size);
};

